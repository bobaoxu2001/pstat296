library(MASS)
library(ggplot2)
library(ggfortify)
library(forecast)
library(GeneCycle)
library(qpcR)
require(TSA)
#source("plot.roots.R")
TR26_21 <- read_excel("/Users/xuao/Documents/PSTAT296A/pstat296/SBBI Data for Capital Markets (2022_10_21).xlsx", sheet="Processed")
TR26_21 <- read_excel("/Users/xuao/Documents/PSTAT296A/pstat296/SBBI Data for Capital Markets (2022_10_21).xlsx", sheet="Processed")
setwd("/Users/xuao/Documents/PSTAT296A/pstat296")
library(tsdl)
library(forecast)
library(tidyverse)
library(astsa)
library(MASS)
library(ggplot2)
library(readxl)
library(ggfortify)
library(forecast)
library(GeneCycle)
library(qpcR)
require(TSA)
#source("plot.roots.R")
rm(list = ls())
TR26_21 <- read_excel("/Users/xuao/Documents/PSTAT296A/pstat296/SBBI Data for Capital Markets (2022_10_21).xlsx", sheet="Processed")
colnames(TR26_21) <- c("Observed Month", "Large Cap TR", "LT Govt TR 20 YR","IT Govt TR 5 YR","LT Corp TR 20 YR","T-Bill TR 30 DAY","US CPI/ INFLATION","LT Govt Yield 20 YEAR","IT Govt Yield 5 YEAR")
TR26_21 <- TR26_21 %>%
filter(!row_number() %in% c(1:5)) %>%
janitor::clean_names()
TR26_21 <- as.data.frame(sapply(TR26_21, as.numeric))
TR26_21 <- TR26_21 %>%
mutate(observed_month = as.Date(observed_month,origin = "1899-12-30"))
#TR26_21
Govt_20_Yield <- TR26_21[,c(1,8)]
Govt_20_Yield$yield_percentage <- round(Govt_20_Yield$lt_govt_yield_20_year*100, digits = 3)
#Govt_20_Yield$yield_percentage
summary(Govt_20_Yield$yield_percentage)
plot(Govt_20_Yield$yield_percentage,type="l")
train <- Govt_20_Yield$yield_percentage[700:1140]
test <- Govt_20_Yield$yield_percentage[1141:1152]
#train
#test
train <- Govt_20_Yield$yield_percentage[700:1140]
test <- Govt_20_Yield$yield_percentage[1141:1152]
#train
#test
train <- Govt_20_Yield$yield_percentage[700:1140]
test <- Govt_20_Yield$yield_percentage[1141:1152]
train
test
train <- Govt_20_Yield$yield_percentage[700:1140]
test <- Govt_20_Yield$yield_percentage[1141:1152]
#train
#test
train <- Govt_20_Yield$yield_percentage[700:1140]
test <- Govt_20_Yield$yield_percentage[1141:1152]
#train
#test
train <- Govt_20_Yield$yield_percentage[600:1140]
test <- Govt_20_Yield$yield_percentage[1141:1152]
#train
#test
tsdata <- ts(train, frequency = 12)
ts.plot(tsdata)
hist(tsdata, main="Histogram",
xlab="date")
# Box-Cox transformation:
t <- 1:length(tsdata)
bcTransform <- boxcox(tsdata ~ t, plotit=TRUE)
lambda <- bcTransform$x[which.max(bcTransform$y)]
lambda
tsdata.bc = (1/lambda)*(tsdata^lambda-1)
# Plot and compare the two:
par(mfrow=c(1, 2))
ts.plot(tsdata, main = "Original data",ylab = expression(X[t]))
ts.plot(tsdata.bc, main = "Box-Cox tranformed data", ylab = expression(Y[t]))
# Compare tsdata and tsdata.bc
par(mfrow=c(2,3))
plot.ts(tsdata,xlab = "", main = "")
hist(tsdata, col = "light blue", xlab = "", main = "")
qqnorm(tsdata, main = "", xlab = "")
qqline(tsdata, col = "red")
plot.ts(tsdata.bc,xlab = "", main = "")
hist(tsdata.bc, col = "light blue", xlab = "", main = "")
qqnorm(tsdata.bc, main = "", xlab = "")
qqline(tsdata.bc, col = "red")
hist(tsdata.bc)
decomp <- decompose(tsdata)
plot(decomp)
# Remove seasonality and trend
tsdata_12 <- diff(tsdata, lag = 12)
tsdata_12_1 <- diff(tsdata_12, lag = 1)
tsdata_12_1_1 <- diff(tsdata_12_1, lag = 1)
# To check number differencing par(mfrow=c(1,2))
plot.ts(tsdata_12, main = "")
abline(h=mean(tsdata_12), col = "blue")
plot.ts(tsdata_12_1, main = "")
abline(h=mean(tsdata_12_1), col = "blue")
# Plot it:
#par(mfrow=c(1, 1))
#ts.plot(y.12, main="De-seasonlized Time Series",ylab=expression(nabla[12]~Y[t]))
#abline(h=mean(y.12), lty=2)
# To check number differencing par(mfrow=c(1,2))
plot.ts(tsdata_12, main = "")
abline(h=mean(tsdata_12), col = "blue")
plot.ts(tsdata_12_1, main = "")
abline(h=mean(tsdata_12_1), col = "blue")
Plot it:
#Plot it:
par(mfrow=c(1, 1))
ts.plot(y.12, main="De-seasonlized Time Series",ylab=expression(nabla[12]~Y[t]))
tsdata <- ts(train, frequency = 12)
ts.plot(tsdata)
hist(tsdata, main="Histogram",
xlab="date")
# Box-Cox transformation:
t <- 1:length(tsdata)
bcTransform <- boxcox(tsdata ~ t, plotit=TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/xuao/Documents/PSTAT296A/pstat296")
library(tsdl)
library(forecast)
library(tidyverse)
library(astsa)
library(MASS)
library(ggplot2)
library(readxl)
library(ggfortify)
library(forecast)
library(GeneCycle)
library(qpcR)
require(TSA)
#source("plot.roots.R")
rm(list = ls())
TR26_21 <- read_excel("/Users/xuao/Documents/PSTAT296A/pstat296/SBBI Data for Capital Markets (2022_10_21).xlsx", sheet="Processed")
colnames(TR26_21) <- c("Observed Month", "Large Cap TR", "LT Govt TR 20 YR","IT Govt TR 5 YR","LT Corp TR 20 YR","T-Bill TR 30 DAY","US CPI/ INFLATION","LT Govt Yield 20 YEAR","IT Govt Yield 5 YEAR")
TR26_21 <- TR26_21 %>%
filter(!row_number() %in% c(1:5)) %>%
janitor::clean_names()
TR26_21 <- as.data.frame(sapply(TR26_21, as.numeric))
TR26_21 <- TR26_21 %>%
mutate(observed_month = as.Date(observed_month,origin = "1899-12-30"))
#TR26_21
Govt_20_Yield <- TR26_21[,c(1,8)]
Govt_20_Yield$yield_percentage <- round(Govt_20_Yield$lt_govt_yield_20_year*100, digits = 3)
#Govt_20_Yield$yield_percentage
summary(Govt_20_Yield$yield_percentage)
require(tidyverse)
require(tidytext)
require(textstem)
require(rvest)
require(qdapRegex)
require(stopwords)
require(tokenizers)
require(tidymodels)
require(modelr)
require(Matrix)
require(sparsesvd)
require(glmnet)
# function to parse html and clean text
parse_fn <- function(.html){
read_html(.html) %>%
html_elements('p') %>%
html_text2() %>%
str_c(collapse = ' ') %>%
rm_url() %>%
rm_email() %>%
str_remove_all('\'') %>%
str_replace_all(paste(c('\n',
'[[:punct:]]',
'nbsp',
'[[:digit:]]',
'[[:symbol:]]'),
collapse = '|'), ' ') %>%
str_replace_all("([a-z])([A-Z])", "\\1 \\2") %>%
tolower() %>%
str_replace_all("\\s+", " ")
}
# function to apply to claims data
parse_data <- function(.df){
out <- .df %>%
filter(str_detect(text_tmp, '<!')) %>%
rowwise() %>%
mutate(text_clean = parse_fn(text_tmp)) %>%
unnest(text_clean)
return(out)
}
Govt_20_Yield <- TR26_21[,c(1,8)]
Govt_20_Yield$yield_percentage <- round(Govt_20_Yield$lt_govt_yield_20_year*100, digits = 3)
Govt_20_Yield$yield_percentage
Govt_20_Yield <- TR26_21[,c(1,8)]
Govt_20_Yield$yield_percentage <- round(Govt_20_Yield$lt_govt_yield_20_year*100, digits = 3)
#Govt_20_Yield$yield_percentage
summary(Govt_20_Yield$yield_percentage)
plot(Govt_20_Yield$yield_percentage,type="l")
train <- Govt_20_Yield$yield_percentage[600:1140]
test <- Govt_20_Yield$yield_percentage[1141:1152]
#train
#test
tsdata <- ts(train, frequency = 12)
ts.plot(tsdata)
hist(tsdata, main="Histogram",
xlab="date")
# Box-Cox transformation:
t <- 1:length(tsdata)
bcTransform <- boxcox(tsdata ~ t, plotit=TRUE)
lambda <- bcTransform$x[which.max(bcTransform$y)]
lambda
tsdata.bc = (1/lambda)*(tsdata^lambda-1)
# Plot and compare the two:
par(mfrow=c(1, 2))
ts.plot(tsdata, main = "Original data",ylab = expression(X[t]))
ts.plot(tsdata.bc, main = "Box-Cox tranformed data", ylab = expression(Y[t]))
# Box-Cox transformation:
t <- 1:length(tsdata)
bcTransform <- boxcox(tsdata ~ t, plotit=TRUE)
lambda <- bcTransform$x[which.max(bcTransform$y)]
lambda
tsdata.bc = (1/lambda)*(tsdata^lambda-1)
# Plot and compare the two:
par(mfrow=c(1, 2))
ts.plot(tsdata, main = "Original data",ylab = expression(X[t]))
ts.plot(tsdata.bc, main = "Box-Cox tranformed data", ylab = expression(Y[t]))
# Compare tsdata and tsdata.bc
par(mfrow=c(2,3))
plot.ts(tsdata,xlab = "", main = "")
hist(tsdata, col = "light blue", xlab = "", main = "")
qqnorm(tsdata, main = "", xlab = "")
qqline(tsdata, col = "red")
plot.ts(tsdata.bc,xlab = "", main = "")
hist(tsdata.bc, col = "light blue", xlab = "", main = "")
qqnorm(tsdata.bc, main = "", xlab = "")
qqline(tsdata.bc, col = "red")
hist(tsdata.bc)
decomp <- decompose(tsdata)
plot(decomp)
# Remove seasonality and trend
tsdata_12 <- diff(tsdata, lag = 12)
tsdata_12_1 <- diff(tsdata_12, lag = 1)
tsdata_12_1_1 <- diff(tsdata_12_1, lag = 1)
# To check number differencing par(mfrow=c(1,2))
plot.ts(tsdata_12, main = "")
abline(h=mean(tsdata_12), col = "blue")
plot.ts(tsdata_12_1, main = "")
abline(h=mean(tsdata_12_1), col = "blue")
#Plot it:
par(mfrow=c(1, 1))
ts.plot(y.12, main="De-seasonlized Time Series",ylab=expression(nabla[12]~Y[t]))
#Plot it:
par(mfrow=c(1, 1))
ts.plot(y.12, main="De-seasonlized Time Series",ylab=expression(nabla[12]~Y[t]))
# To check number differencing par(mfrow=c(1,2))
plot.ts(tsdata_12, main = "")
abline(h=mean(tsdata_12), col = "blue")
plot.ts(tsdata_12_1, main = "")
abline(h=mean(tsdata_12_1), col = "blue")
#Plot it:
par(mfrow=c(1, 1))
ts.plot(y.12, main="De-seasonlized Time Series",ylab=expression(nabla[12]~Y[t]))
# Remove seasonality and trend
tsdata_12 <- diff(tsdata, lag = 12)
tsdata_12_1 <- diff(tsdata_12, lag = 1)
tsdata_12_1_1 <- diff(tsdata_12_1, lag = 1)
# To check number differencing par(mfrow=c(1,2))
plot.ts(tsdata_12, main = "")
abline(h=mean(tsdata_12), col = "blue")
plot.ts(tsdata_12_1, main = "")
abline(h=mean(tsdata_12_1), col = "blue")
#Plot it:
par(mfrow=c(1, 1))
ts.plot(tsdata_12_1_1, main="De-seasonlized Time Series",ylab=expression(nabla[12]~Y[t]))
abline(h=mean(y.12), lty=2)
#Plot it:
par(mfrow=c(1, 1))
ts.plot(tsdata_12_1_1, main="De-seasonlized Time Series",ylab=expression(nabla[12]~Y[t]))
abline(h=mean(tsdata_12_1_1), lty=2)
# Compare the ACF and PACF of tsdata, tsdata_12, and tsdata_12_1 par(mfrow=c(2,3))
par(mfrow=c(2,3))
acf(tsdata, lag.max = 60, main = expression(U[t]))
acf(tsdata_12, lag.max = 60, main = expression(nabla[12]~~U[t]))
acf(tsdata_12_1, lag.max = 60, main = expression(nabla[1]~nabla[12]~~U[t]))
pacf(tsdata, lag.max = 60, main = "")
pacf(tsdata_12, lag.max = 60, main = "")
pacf(tsdata_12_1, lag.max = 60, main = "")
# Candidate models:
df <- expand.grid(p=0:1, q=0:1, P=0:2, Q=0:1)
df <- cbind(df, AICc=NA)
# Compute AICc:
for (i in 1:nrow(df)) {
sarima.obj <- NULL
try(arima.obj <- arima(tsdata.bc, order=c(df$p[i], 0, df$q[i]),seasonal=list(order=c(df$P[i], 1, df$Q[i]),period=12),method="ML"))
if (!is.null(arima.obj)) { df$AICc[i] <- AICc(arima.obj) }
# print(df[i, ])
}
df[which.min(df$AICc), ]
# Compare the ACF and PACF of tsdata, tsdata_12, and tsdata_12_1 par(mfrow=c(2,3))
par(mfrow=c(2,3))
acf(tsdata, lag.max = 60, main = expression(U[t]))
acf(tsdata_12, lag.max = 60, main = expression(nabla[12]~~U[t]))
acf(tsdata_12_1, lag.max = 60, main = expression(nabla[1]~nabla[12]~~U[t]))
pacf(tsdata, lag.max = 60, main = "")
pacf(tsdata_12, lag.max = 60, main = "")
pacf(tsdata_12_1, lag.max = 60, main = "")
# Compare the ACF and PACF of tsdata, tsdata_12, and tsdata_12_1 par(mfrow=c(2,3))
par(mfrow=c(2,3))
acf(tsdata, lag.max = 40, main = expression(U[t]))
acf(tsdata_12, lag.max = 40, main = expression(nabla[12]~~U[t]))
acf(tsdata_12_1, lag.max = 40, main = expression(nabla[1]~nabla[12]~~U[t]))
pacf(tsdata, lag.max = 40, main = "")
pacf(tsdata_12, lag.max = 40, main = "")
pacf(tsdata_12_1, lag.max = 40, main = "")
# Compare the ACF and PACF of tsdata, tsdata_12, and tsdata_12_1 par(mfrow=c(2,3))
par(mfrow=c(2,3))
acf(tsdata, lag.max = 60, main = expression(U[t]))
acf(tsdata_12, lag.max = 60, main = expression(nabla[12]~~U[t]))
acf(tsdata_12_1, lag.max = 60, main = expression(nabla[1]~nabla[12]~~U[t]))
pacf(tsdata, lag.max = 60, main = "")
pacf(tsdata_12, lag.max = 60, main = "")
pacf(tsdata_12_1, lag.max = 60, main = "")
# Compare the ACF and PACF of tsdata, tsdata_12, and tsdata_12_1 par(mfrow=c(2,3))
par(mfrow=c(2,3))
acf(tsdata, lag.max = 40, main = expression(U[t]))
acf(tsdata_12, lag.max = 40, main = expression(nabla[12]~~U[t]))
acf(tsdata_12_1, lag.max = 40, main = expression(nabla[1]~nabla[12]~~U[t]))
pacf(tsdata, lag.max = 40, main = "")
pacf(tsdata_12, lag.max = 40, main = "")
pacf(tsdata_12_1, lag.max = 40, main = "")
# Candidate models:
df <- expand.grid(p=0:1, q=0:1, P=0:2, Q=0:1)
df <- cbind(df, AICc=NA)
# Compute AICc:
for (i in 1:nrow(df)) {
sarima.obj <- NULL
try(arima.obj <- arima(tsdata.bc, order=c(df$p[i], 0, df$q[i]),seasonal=list(order=c(df$P[i], 1, df$Q[i]),period=12),method="ML"))
if (!is.null(arima.obj)) { df$AICc[i] <- AICc(arima.obj) }
# print(df[i, ])
}
df[which.min(df$AICc), ]
# Decide the proper p,d,q, P,D,Q from the acf and pacf plots
acf(c_train_12_1, lag.max = 60) pacf(c_train_12_1, lag.max = 60)
# Decide the proper p,d,q, P,D,Q from the acf and pacf plots
acf(c_train_12_1, lag.max = 60)
# Decide the proper p,d,q, P,D,Q from the acf and pacf plots
acf(tsdata_12_1, lag.max = 60)
pacf(tsdata_12_1, lag.max = 60)
# Calculate the AICc of possible models
a <- AICc(arima(tsdata.bc, order = c(0,1,0),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
b<- AICc(arima(tsdata.bc, order = c(0,1,1),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
c<- AICc(arima(tsdata.bc, order = c(0,1,3),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
d<- AICc(arima(tsdata.bc, order = c(1,1,0),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
e<- AICc(arima(tsdata.bc, order = c(1,1,1),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
f<- AICc(arima(tsdata.bc, order = c(1,1,3),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
g<- AICc(arima(tsdata.bc, order = c(2,1,0),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
h<- AICc(arima(tsdata.bc, order = c(2,1,1),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
i<- AICc(arima(tsdata.bc, order = c(2,1,3),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
AICc_value <- rbind(a,b,c,d,e,f,g,h,i)
rownames(AICc_value)<-c("$SARIMA(0,1,0)(0,1,1)_{12}$", "$SARIMA(0,1,1)(0,1,1)_{12}$",
"$SARIMA(0,1,3)(0,1,1)_{12}$", "$SARIMA(1,1,0)(0,1,1)_{12}$", "$SARIMA(1,1,1)(0,1,1)_{12}$","$SARIMA(1,1,3)(0,1,1)_{12}$", "$SARIMA(2,1,0)(0,1,1)_{12}$","$SARIMA(2,1,1)(0,1,1)_{12}$", "$SARIMA(2,1,3)(0,1,1)_{12}$")
colnames(AICc_value) <-c("AICc")
knitr::kable(AICc_value)
train <- Govt_20_Yield$yield_percentage[700:1140]
test <- Govt_20_Yield$yield_percentage[1141:1152]
#train
#test
tsdata <- ts(train, frequency = 12)
ts.plot(tsdata)
hist(tsdata, main="Histogram",
xlab="date")
# Calculate the AICc of possible models
a <- AICc(arima(tsdata.bc, order = c(0,0,0),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
b<- AICc(arima(tsdata.bc, order = c(0,0,1),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
c<- AICc(arima(tsdata.bc, order = c(0,0,3),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
d<- AICc(arima(tsdata.bc, order = c(1,1,0),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
e<- AICc(arima(tsdata.bc, order = c(1,1,1),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
f<- AICc(arima(tsdata.bc, order = c(1,1,3),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
g<- AICc(arima(tsdata.bc, order = c(2,1,0),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
h<- AICc(arima(tsdata.bc, order = c(2,1,1),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
i<- AICc(arima(tsdata.bc, order = c(2,1,3),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
AICc_value <- rbind(a,b,c,d,e,f,g,h,i)
rownames(AICc_value)<-c("$SARIMA(0,1,0)(0,1,1)_{12}$", "$SARIMA(0,1,1)(0,1,1)_{12}$",
"$SARIMA(0,1,3)(0,1,1)_{12}$", "$SARIMA(1,1,0)(0,1,1)_{12}$", "$SARIMA(1,1,1)(0,1,1)_{12}$","$SARIMA(1,1,3)(0,1,1)_{12}$", "$SARIMA(2,1,0)(0,1,1)_{12}$","$SARIMA(2,1,1)(0,1,1)_{12}$", "$SARIMA(2,1,3)(0,1,1)_{12}$")
colnames(AICc_value) <-c("AICc")
knitr::kable(AICc_value)
# Box-Cox transformation:
t <- 1:length(tsdata)
bcTransform <- boxcox(tsdata ~ t, plotit=TRUE)
lambda <- bcTransform$x[which.max(bcTransform$y)]
tsdata.bc = (1/lambda)*(tsdata^lambda-1)
# Plot and compare the two:
par(mfrow=c(1, 2))
ts.plot(tsdata, main = "Original data",ylab = expression(X[t]))
ts.plot(tsdata.bc, main = "Box-Cox tranformed data", ylab = expression(Y[t]))
# Calculate the AICc of possible models
a <- AICc(arima(tsdata.bc, order = c(0,0,0),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
b<- AICc(arima(tsdata.bc, order = c(0,0,1),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
c<- AICc(arima(tsdata.bc, order = c(0,0,3),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
d<- AICc(arima(tsdata.bc, order = c(1,1,0),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
e<- AICc(arima(tsdata.bc, order = c(1,1,1),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
f<- AICc(arima(tsdata.bc, order = c(1,1,3),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
g<- AICc(arima(tsdata.bc, order = c(2,1,0),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
h<- AICc(arima(tsdata.bc, order = c(2,1,1),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
i<- AICc(arima(tsdata.bc, order = c(2,1,3),
seasonal = list(order = c(0,1,1), period = 12), method = "ML"))
AICc_value <- rbind(a,b,c,d,e,f,g,h,i)
rownames(AICc_value)<-c("$SARIMA(0,1,0)(0,1,1)_{12}$", "$SARIMA(0,1,1)(0,1,1)_{12}$",
"$SARIMA(0,1,3)(0,1,1)_{12}$", "$SARIMA(1,1,0)(0,1,1)_{12}$", "$SARIMA(1,1,1)(0,1,1)_{12}$","$SARIMA(1,1,3)(0,1,1)_{12}$", "$SARIMA(2,1,0)(0,1,1)_{12}$","$SARIMA(2,1,1)(0,1,1)_{12}$", "$SARIMA(2,1,3)(0,1,1)_{12}$")
colnames(AICc_value) <-c("AICc")
knitr::kable(AICc_value)
# Remove seasonality and trend
tsdata_12 <- diff(tsdata, lag = 12)
tsdata_12_1 <- diff(tsdata_12, lag = 1)
tsdata_12_1_1 <- diff(tsdata_12_1, lag = 1)
# Candidate models:
df <- expand.grid(p=0:1, q=0:1, P=0:2, Q=0:1)
df <- cbind(df, AICc=NA)
# Compute AICc:
for (i in 1:nrow(df)) {
sarima.obj <- NULL
try(arima.obj <- arima(tsdata.bc, order=c(df$p[i], 0, df$q[i]),seasonal=list(order=c(df$P[i], 1, df$Q[i]),period=12),method="ML"))
if (!is.null(arima.obj)) { df$AICc[i] <- AICc(arima.obj) }
# print(df[i, ])
}
df[which.min(df$AICc), ]
# Candidate models:
df <- expand.grid(p=0:1, q=0:1, P=0:2, Q=0:1)
df <- cbind(df, AICc=NA)
# Compute AICc:
for (i in 1:nrow(df)) {
sarima.obj <- NULL
try(arima.obj <- arima(tsdata.bc, order=c(df$p[i], 0, df$q[i]),seasonal=list(order=c(df$P[i], 1, df$Q[i]),period=12),method="ML"))
if (!is.null(arima.obj)) { df$AICc[i] <- AICc(arima.obj) }
# print(df[i, ])
}
df[which.min(df$AICc), ]
# Predict 10 future observations and plot
par(mfrow=c(1, 1))
mypred <- predict(tsdata.bc, n.ahead=60)
# Predict 30 future observations and plot
par(mfrow=c(1, 1))
mypred <- sarima.for(train, n.ahead = 30, p=2, d=1, q=0, P=, D=1, Q=1, S=12)
points(1141:1152, test, col="yellow")
# Predict 30 future observations and plot
par(mfrow=c(1, 1))
mypred <- sarima.for(tsdata.bc, n.ahead = 30, p=2, d=1, q=0, P=, D=1, Q=1, S=12)
points(1141:1152, test, col="yellow")
# Predict 30 future observations and plot
par(mfrow=c(1, 1))
mypred <- sarima.for(train, n.ahead = 30, p=2, d=1, q=0, P=, D=1, Q=1, S=12)
points(1141:1152, test, col="yellow")
# Predict 30 future observations and plot
par(mfrow=c(1, 1))
mypred <- sarima.for(train, n.ahead = 30, p=2, d=1, q=0, P=, D=1, Q=1, S=12)
points(1141:1152, col="yellow")
# Predict 30 future observations and plot
par(mfrow=c(1, 1))
mypred <- sarima.for(train, n.ahead = 30, p=2, d=1, q=0, P=, D=1, Q=1, S=12)
points(1141:1152, test, col="yellow")
train <- Govt_20_Yield$yield_percentage[700:1140]
test <- Govt_20_Yield$yield_percentage[1141:1152]
#train
#test
train <- Govt_20_Yield$yield_percentage[700:1140]
test <- Govt_20_Yield$yield_percentage[1141:1152]
#train
test
# Predict 30 future observations and plot
par(mfrow=c(1, 1))
mypred <- sarima.for(train, n.ahead = 30, p=2, d=1, q=0, P=, D=1, Q=1, S=12)
points(1141:1152, test, col="yellow")
# Predict 30 future observations and plot
par(mfrow=c(1, 1))
mypred <- sarima.for(train, n.ahead = 30, p=2, d=1, q=0, P=, D=1, Q=1, S=12)
points(1141:1152, test)
# Predict 30 future observations and plot
par(mfrow=c(1, 1))
mypred <- sarima.for(train, n.ahead = 30, p=2, d=1, q=0, P=, D=1, Q=1, S=12)
points(1141:1152, test, col= 'blue')
# Predict 30 future observations and plot
par(mfrow=c(1, 1))
mypred <- sarima.for(train, n.ahead = 30, p=2, d=1, q=0, P=, D=1, Q=1, S=12)
points(441:452, test, col= 'blue')
# Predict 30 future observations and plot
par(mfrow=c(1, 1))
mypred <- sarima.for(train, n.ahead = 12, p=2, d=1, q=0, P=, D=1, Q=1, S=12)
points(441:452, test, col= 'blue')
